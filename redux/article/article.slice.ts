import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import axios from "axios";
import type { AppState } from "../store";
// import type { AppThunk } from '../store'

interface IArticle {
  userId: number;
  id: number;
  title: string;
  completed: boolean;
}

export interface ArticleState {
  status: "idle" | "loading" | "failed";
  articles: IArticle[];
}

const initialState: ArticleState = {
  articles: [],
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchArticles = createAsyncThunk(
  "articles/fetchArticles",
  async () => {
    const response = await axios.get<IArticle[]>(
      "https://jsonplaceholder.typicode.com/todos"
    );
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const articleSlice = createSlice({
  name: "article",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addArticle: (state: ArticleState, action: PayloadAction<IArticle>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes

      state.articles = [...state.articles, action.payload];
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchArticles.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchArticles.fulfilled, (state, action) => {
        state.status = "idle";
        state.articles = action.payload;
      });
  },
});

export const { addArticle } = articleSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectArticles = (state: AppState) => state.article.articles;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentArticle = selectArticles(getState())
//     if (currentArticle.) {
//       dispatch(incrementByAmount(amount))
//     }
//   }

export default articleSlice.reducer;
